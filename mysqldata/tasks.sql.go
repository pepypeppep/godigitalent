// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: tasks.sql

package mysqldata

import (
	"context"
	"database/sql"
	"time"
)

const getDoneList = `-- name: GetDoneList :many
SELECT id, description, assignee, is_done, deadline_at, created_at, updated_at FROM tasks WHERE is_done = 1
`

func (q *Queries) GetDoneList(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getDoneList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Assignee,
			&i.IsDone,
			&i.DeadlineAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getToDoList = `-- name: GetToDoList :many
SELECT id, description, assignee, is_done, deadline_at, created_at, updated_at FROM tasks WHERE is_done = 0
`

func (q *Queries) GetToDoList(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getToDoList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Assignee,
			&i.IsDone,
			&i.DeadlineAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const taskDelete = `-- name: TaskDelete :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) TaskDelete(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, taskDelete, id)
	return err
}

const taskGetById = `-- name: TaskGetById :one
SELECT id, description, assignee, is_done, deadline_at, created_at, updated_at
FROM tasks
WHERE id = ?
`

func (q *Queries) TaskGetById(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, taskGetById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Assignee,
		&i.IsDone,
		&i.DeadlineAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const taskInsert = `-- name: TaskInsert :execresult
INSERT INTO tasks (description, assignee, deadline_at)
VALUES (?,?,?)
`

type TaskInsertParams struct {
	Description string    `json:"description"`
	Assignee    string    `json:"assignee"`
	DeadlineAt  time.Time `json:"deadline_at"`
}

func (q *Queries) TaskInsert(ctx context.Context, arg TaskInsertParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, taskInsert, arg.Description, arg.Assignee, arg.DeadlineAt)
}

const taskUpdate = `-- name: TaskUpdate :exec
UPDATE tasks
set description= ?,
    assignee= ?,
    deadline_at= ?
where id = ?
`

type TaskUpdateParams struct {
	Description string    `json:"description"`
	Assignee    string    `json:"assignee"`
	DeadlineAt  time.Time `json:"deadline_at"`
	ID          int32     `json:"id"`
}

func (q *Queries) TaskUpdate(ctx context.Context, arg TaskUpdateParams) error {
	_, err := q.db.ExecContext(ctx, taskUpdate,
		arg.Description,
		arg.Assignee,
		arg.DeadlineAt,
		arg.ID,
	)
	return err
}

const taskUpdateProgress = `-- name: TaskUpdateProgress :exec
UPDATE tasks
set is_done= ?
where id = ?
`

type TaskUpdateProgressParams struct {
	IsDone bool  `json:"is_done"`
	ID     int32 `json:"id"`
}

func (q *Queries) TaskUpdateProgress(ctx context.Context, arg TaskUpdateProgressParams) error {
	_, err := q.db.ExecContext(ctx, taskUpdateProgress, arg.IsDone, arg.ID)
	return err
}
